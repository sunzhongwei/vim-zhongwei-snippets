snippet code "Description" i
\`\`\`
${1:CODE}
\`\`\`
endsnippet

snippet link "Description" i
[${1:NAME}](${2:URL})
endsnippet

snippet link_out "markdown" i
<a href="${1:LINK}" rel="nofollow" target="_blank">$1</a>
endsnippet

snippet api "Description" i
## 接口 - 查询XXX

**请求说明**

HTTP 请求方式: GET
http://api.xxx.com/api/isvip?id=ID

**参数说明**
- id （必填）身份证号码

**返回说明**
正常情况下，服务端会返回下述 JSON 数据包给客户端：

\`\`\`
{
	"err_code": 0,
	"err_msg": ""
	"data": null
}
\`\`\`

参数说明

- err_code: 错误码，0 代表正常，非 0 代表异常
- err_msg: 错误信息，当 errcode 为非0时，才会显示错误信息。例如，"id 格式不正确"
endsnippet

snippet api_post "Description" i
## 接口 - 提交 xxx 

**请求说明**

HTTP 请求方式: POST 
http://api.xxx.com/api/approval

POST 数据格式：JSON

POST 数据例子：

\`\`\`
{
	"id": "3701xxxxxxxxxxxx1",		# 身份证号码
}
\`\`\`

**参数说明**
- id （必填）身份证号码

**返回说明**
正常情况下，服务端会返回下述 JSON 数据包给客户端：

\`\`\`
{
	"err_code": 0,
	"err_msg": ""
}
\`\`\`

参数说明

- err_code: 错误码，0 代表正常，非 0 代表异常
- err_msg: 错误信息，当 errcode 为非 0 时，才会显示错误信息。例如，"id 格式不正确"
endsnippet

snippet done "markdown" i
[X] 
endsnippet

snippet todo "markdown" i
# 需求文档


## TODO
- 整理需求
- init git project
- 情怀
- 燃尽欲望


## DONE


## 原始需求描述


## 感悟
- 只有精益求精，追求细节，才能体会编程的乐趣。否则就是应付了事, 变成一件枯燥的任务
- 在追求快速开发的过程中，创造新的需求和工具。如果不追求快，就不会有需求。
- 纯文本写作才是返璞归真，不依赖复杂工具
- Bootstrap 的样式代码有必要学习一遍


endsnippet

snippet todo_deploy "markdown" i
## 线上部署
- [] 微信小程序 app id 使用正式的
- [] golang gin 后台 app id 替换为正式的
- [] 线上 mysql 建库
- [] mysql 导入数据表
- [] 本地 makefile 实现打包，scp 发布。线上建个项目文件目录
- [] 注册一个二级域名
- [] 微信小程序后台，将新的二级域名加到可信域名里。https://repair.sunzhongwei.com
- [] nginx 配置
- [] 发布，scp .env 到线上，并修改配置
- [] 设置 https
- [] systemd 配置。防止演示时服务挂掉
- [] 录入测试数据 
- [] 线上部署步骤，保存为 markdown snippet
- [] 本地测试，没问题后，再使用体验版测试，然后提交审核
endsnippet

# 参考：
# https://github.com/honza/vim-snippets/blob/master/UltiSnips/markdown.snippets

snippet task_date "markdown" i
`!v strftime("[ ] %F %w: ")`
endsnippet

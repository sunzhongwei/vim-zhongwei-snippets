snippet log "kotlin_android" i
Log.d(_logTag, ${1:VALUE});
endsnippet

snippet log_tag "kotlin_android" i
private val _logTag = "${1:MyActivity}"
endsnippet

snippet view_binding "kotlin_android" i
import com.sunzhongwei.todo.databinding.${1:SomeBinding}

private var _binding: $1? = null
// This property is only valid between onCreateView and onDestroyView.
private val binding get() = _binding!!

// onCreateView
_binding = $1.inflate(inflater, container, false)
return binding.root

override fun onDestroyView() {
	super.onDestroyView()
	_binding = null
}
endsnippet

snippet recycler_view_adapter "kotlin_android" i
package com.sunzhongwei.${1:APP}.adapters

import android.view.LayoutInflater
import android.view.ViewGroup
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.RecyclerView
import com.sunzhongwei.$1.data.${2:Item}
import com.sunzhongwei.$1.databinding.${3:BINDING}


class $2Adapter : ListAdapter<$2, $2Adapter.$2ViewHolder>($2DiffCallback()) {
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): $2ViewHolder {
        return $2ViewHolder(
            $3.inflate(
                LayoutInflater.from(parent.context),
                parent,
                false
            )
        )
    }

    override fun onBindViewHolder(holder: $2ViewHolder, position: Int) {
        val ${2/\w+\s*/\l$0/} = getItem(position)
        holder.bind(${2/\w+\s*/\l$0/})
    }

    class $2ViewHolder(
        private val binding: $3 
    ) : RecyclerView.ViewHolder(binding.root) {
        fun bind(item: $2) {
            binding.apply {
                ${2/\w+\s*/\l$0/} = item
                executePendingBindings()
            }
        }
    }
}


private class $2DiffCallback : DiffUtil.ItemCallback<$2>() {
    override fun areItemsTheSame(oldItem: $2, newItem: $2): Boolean {
        return oldItem.id == newItem.id
    }

    override fun areContentsTheSame(oldItem: $2, newItem: $2): Boolean {
        return oldItem == newItem
    }
}
endsnippet


snippet application "kotlin_android" i
package com.sunzhongwei.${1:APP}

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MainApplication: Application()
endsnippet

snippet index "kotlin_android" i
indices = arrayOf(Index(value = ["last_name", "address"]))
endsnippet

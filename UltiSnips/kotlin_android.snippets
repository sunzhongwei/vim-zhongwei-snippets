snippet log "kotlin_android" i
Log.d(_logTag, ${1:VALUE});
endsnippet

snippet log_tag "kotlin_android" i
private val _logTag = "${1:MyActivity}"
endsnippet

snippet view_binding_in_fragment "kotlin_android" i
// Module build.gradle 的 android section 中添加, 然后 Sync
buildFeatures {
	viewBinding = true
}

import com.sunzhongwei.todo.databinding.${1:SomeBinding}

private var _binding: $1? = null
// This property is only valid between onCreateView and onDestroyView.
private val binding get() = _binding!!

// onCreateView
_binding = $1.inflate(inflater, container, false)
return binding.root

override fun onDestroyView() {
	super.onDestroyView()
	_binding = null
}
endsnippet

snippet view_binding_in_activity "kotlin_android" i
// Module build.gradle 的 android section 中添加, 然后 Sync
// app/build.gradle
buildFeatures {
	viewBinding = true
}

import com.sunzhongwei.todo.databinding.${1:ActivityMainBinding}


private lateinit var binding: $1

// onCreateView
// remove: setContentView(R.layout.activity_main)
// use binding.<RID>.text = something
binding = $1.inflate(layoutInflater)
val view = binding.root
setContentView(view)
endsnippet


snippet recycler_view "kotlin_android" i
// onViewCreated in Activity / Fragment
val recyclerView: RecyclerView = binding.itemList

recyclerView.layoutManager =
    LinearLayoutManager(activity, LinearLayoutManager.VERTICAL, false)
val adapter = ${1:Item}sAdapter()
recyclerView.adapter = adapter

viewModel.${1/\w+\s*/\l$0/}s.observe(
    viewLifecycleOwner, Observer {
        it?.let {
            // ListAdapter doesn’t work with mutable lists.
            // You must use a copy even the very first time you pass the List
            // so it is never referring to your mutable List.
            adapter.submitList(it.toList())
        }
    }
)

// new Class File: $1sAdapter
import android.view.LayoutInflater
import android.view.View
import android.view.ViewGroup
import android.widget.TextView
import androidx.recyclerview.widget.DiffUtil
import androidx.recyclerview.widget.ListAdapter
import androidx.recyclerview.widget.RecyclerView

class $1sAdapter :
    ListAdapter<$1, $1sAdapter.ViewHolder>($1DiffCallback) {

    // Create new views (invoked by the layout manager)
    override fun onCreateViewHolder(parent: ViewGroup, viewType: Int): ViewHolder {
        // Create a new view, which defines the UI of the list item
        val layoutInflater = LayoutInflater.from(parent.context)
        val binding = $1sRowItemBinding.inflate(layoutInflater, parent, false)
        return ViewHolder(binding)
    }

    // Replace the contents of a view (invoked by the layout manager)
    // 每个 item 被滚动到屏幕内时执行
    override fun onBindViewHolder(viewHolder: ViewHolder, position: Int) {
        // Get element from your dataset at this position and replace the
        // contents of the view with that element
        viewHolder.bind(getItem(position))
    }

    /**
     * Provide a reference to the type of views that you are using
     * (custom ViewHolder).
     */
    class ViewHolder(private val binding: $1sRowItemBinding) :
        RecyclerView.ViewHolder(binding.root) {

        fun bind(item: $1) {
            binding.name.text = item.name ?: "N/A"

            binding.name.setOnClickListener {
                // ...
            }
        }
    }
}

object $1DiffCallback : DiffUtil.ItemCallback<$1>() {
    // Determine structural changes between old and new list (additions/removals/position changes)
    override fun areItemsTheSame(oldItem: $1, newItem: $1): Boolean {
        return oldItem.id == newItem.id
    }

    // Determines if particular item was updated.
    // If objects in your list are immutable, just return true.
    override fun areContentsTheSame(oldItem: $1, newItem: $1): Boolean {
        return oldItem == newItem
    }
}

// ViewModel Class
import androidx.lifecycle.MutableLiveData
import androidx.lifecycle.ViewModel

class MainViewModel : ViewModel() {
    val ${1/\w+\s*/\l$0/}s = MutableLiveData<MutableList<$1>>()

    init {
        // 如果不初始化， ${1/\w+\s*/\l$0/}s.value? 永远是 null
        ${1/\w+\s*/\l$0/}s.value = mutableListOf()
    }
}
endsnippet


snippet application "kotlin_android" i
package com.sunzhongwei.${1:APP}

import android.app.Application
import dagger.hilt.android.HiltAndroidApp

@HiltAndroidApp
class MainApplication: Application()
endsnippet

snippet index "kotlin_android" i
indices = arrayOf(Index(value = ["last_name", "address"]))
endsnippet

snippet view_unused "kotlin_android" i
@Suppress("UNUSED_PARAMETER")
endsnippet

snippet translation "kotlin_android" i
R.string.${1:NAME}
endsnippet

snippet android_navigate "kotlin_android" i
val intent = Intent(this, ${1:NewActivity}::class.java)
startActivity(intent)
endsnippet

snippet android_click "kotlin_android" i
val $1 = findViewById<Button>(R.id.${1:btn1})
$1.setOnClickListener {
}
endsnippet

snippet view_model "kotlin_android" i
class $1ViewModel : ViewModel() {
    val ${1/\w+\s*/\l$0/} = MutableLiveData<${1:Item}>()
}
endsnippet

snippet view_model_in_activity "kotlin_android" i
private val viewModel: ${1:Item}ViewModel by viewModels()

override fun onCreate(savedInstanceState: Bundle?) {
    super.onCreate(savedInstanceState)
    viewModel.${1/\w+\s*/\l$0/}.observe(this, Observer { ${1/\w+\s*/\l$0/} ->
        // Perform an action with the latest item data
    })
}
endsnippet

snippet view_model_in_fragment "kotlin_android" i
val viewModel: ${1:Item}ViewModel by activityViewModels()

override fun onViewCreated(view: View, savedInstanceState: Bundle?) {
    viewModel.${1/\w+\s*/\l$0/}.observe(viewLifecycleOwner, Observer { ${1/\w+\s*/\l$0/} ->
        // Update the list UI
    }
}
endsnippet

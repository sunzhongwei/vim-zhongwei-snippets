snippet compose_text "kotlin_compose" i
import androidx.compose.material.Text
Text(text = "${1:text}")
endsnippet

snippet compose_preview "kotlin_compose" i
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.runtime.Composable
@Preview
@Composable
fun Preview${1:Home}() {
    val navController = rememberNavController()
    $1Screen(navController)
}
endsnippet

snippet compose_width "kotlin_compose" i
.fillMaxWidth(fraction = 0.8f)
endsnippet

snippet compose_row_space_between "kotlin_compose" i
horizontalArrangement = Arrangement.SpaceBetween
endsnippet

snippet compose_view_model "kotlin_compose" i
import android.app.Application
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.viewmodel.compose.viewModel

val context = LocalContext.current
val ${1:item}ViewModel: ${1/\w+\s*/\u$0/}ViewModel = viewModel(
    factory = ${1/\w+\s*/\u$0/}ViewModelFactory(context.applicationContext as Application)
)
endsnippet

snippet v_center "kotlin_compose" i
verticalAlignment = Alignment.CenterVertically,
endsnippet

snippet center "kotlin_compose" i
horizontalArrangement = Arrangement.End
Column(
    modifier = Modifier.fillMaxWidth().padding(15.dp),
    horizontalAlignment = Alignment.CenterHorizontally,
) {
    Text(text = "No items.")
}
endsnippet

snippet compose_modifier "kotlin_compose" i
modifier = Modifier.fillMaxWidth().padding(15.dp),
endsnippet

snippet compose_click "kotlin_compose" i
Modifier
    .clickable(onClick = onClick)
endsnippet

snippet remember "kotlin_compose" i
val ${1:mutableState} = remember { mutableStateOf(${2:default}) }
endsnippet

snippet remember_set_value "kotlin_compose" i
val (${1:value}, set${1/\w+\s*/\u$0/}) = remember { mutableStateOf(${2:default}) }
endsnippet

snippet compose_field_number "kotlin_compose" i
val (${1:value}, set${1/\w+\s*/\u$0/}) = remember { mutableStateOf(${2:default}) }

TextField(
    label = { Text("Number") },
    value = $1.toString(),
    onValueChange = {set${1/\w+\s*/\u$0/}(it.toInt())},
    modifier = Modifier.fillMaxWidth(),
    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
)
endsnippet

snippet compose_alert_dialog "kotlin_compose" i
val (${1:dialogVisibleForDel}, set${1/\w+\s*/\u$0/}) = remember { mutableStateOf(false) }

if ($1) {
    AlertDialog(
        onDismissRequest = {
            // Dismiss the dialog when the user clicks outside the dialog or on the back
            // button. If you want to disable that functionality, simply use an empty
            // onCloseRequest.
            set${1/\w+\s*/\u$0/}(false)
        },
        title = {
            Text(text = "Title")
        },
        text = {
            Text(
                "This area typically contains the supportive text " +
                    "which presents the details regarding the Dialog's purpose."
            )
        },
        confirmButton = {
            TextButton(
                onClick = {
                    set${1/\w+\s*/\u$0/}(false)
                }
            ) {
                Text("Confirm")
            }
        },
        dismissButton = {
            TextButton(
                onClick = {
                    set${1/\w+\s*/\u$0/}(false)
                }
            ) {
                Text("Dismiss")
            }
        }
    )
}
endsnippet

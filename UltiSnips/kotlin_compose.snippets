snippet compose_text "kotlin_compose" i
import androidx.compose.material.Text
Text(text = "${1:text}")
endsnippet

snippet compose_preview "kotlin_compose" i
import androidx.compose.ui.tooling.preview.Preview
import androidx.compose.runtime.Composable
@Preview
@Composable
fun Preview${1:Home}() {
    val navController = rememberNavController()
    $1Screen(navController)
}
endsnippet

snippet compose_width "kotlin_compose" i
.fillMaxWidth(fraction = 0.8f)
endsnippet

snippet compose_row_space_between "kotlin_compose" i
horizontalArrangement = Arrangement.SpaceBetween
endsnippet

snippet compose_view_model "kotlin_compose" i
import android.app.Application
import androidx.compose.ui.platform.LocalContext
import androidx.lifecycle.viewmodel.compose.viewModel

val context = LocalContext.current
val ${1:item}ViewModel: ${1/\w+\s*/\u$0/}ViewModel = viewModel(
    factory = ${1/\w+\s*/\u$0/}ViewModelFactory(context.applicationContext as Application)
)
endsnippet

snippet v_center "kotlin_compose" i
verticalAlignment = Alignment.CenterVertically,
endsnippet

snippet center_column "kotlin_compose" i
modifier = Modifier.fillMaxWidth().padding(15.dp),
horizontalAlignment = Alignment.CenterHorizontally,
endsnippet

snippet center_row "kotlin_compose" i
modifier = Modifier.fillMaxWidth().padding(25.dp),
horizontalArrangement = Arrangement.Center,
endsnippet

snippet compose_modifier "kotlin_compose" i
modifier = Modifier.fillMaxWidth().padding(15.dp),
endsnippet

snippet compose_click "kotlin_compose" i
Modifier
    .clickable(onClick = onClick)
endsnippet

snippet remember "kotlin_compose" i
val ${1:mutableState} = remember { mutableStateOf(${2:default}) }
endsnippet

snippet remember_set_value "kotlin_compose" i
val (${1:value}, set${1/\w+\s*/\u$0/}) = remember { mutableStateOf(${2:default}) }
endsnippet

snippet compose_field_number "kotlin_compose" i
val (${1:value}, set${1/\w+\s*/\u$0/}) = remember { mutableStateOf(${2:default}) }

TextField(
    label = { Text("Number") },
    value = $1.toString(),
    onValueChange = {set${1/\w+\s*/\u$0/}(it.toInt())},
    modifier = Modifier.fillMaxWidth(),
    keyboardOptions = KeyboardOptions(keyboardType = KeyboardType.Number)
)
endsnippet

snippet compose_alert_dialog "kotlin_compose" i
val (${1:dialogVisibleForDel}, set${1/\w+\s*/\u$0/}) = remember { mutableStateOf(false) }

if ($1) {
    AlertDialog(
        onDismissRequest = {
            // Dismiss the dialog when the user clicks outside the dialog or on the back
            // button. If you want to disable that functionality, simply use an empty
            // onCloseRequest.
            set${1/\w+\s*/\u$0/}(false)
        },
        title = {
            Text(text = "Title")
        },
        text = {
            Text(
                "This area typically contains the supportive text " +
                    "which presents the details regarding the Dialog's purpose."
            )
        },
        confirmButton = {
            TextButton(
                onClick = {
                    set${1/\w+\s*/\u$0/}(false)
                }
            ) {
                Text("Confirm")
            }
        },
        dismissButton = {
            TextButton(
                onClick = {
                    set${1/\w+\s*/\u$0/}(false)
                }
            ) {
                Text("Dismiss")
            }
        }
    )
}
endsnippet

snippet compose_button "kotlin_compose" i
Row (
    modifier = Modifier
        .fillMaxWidth()
        .padding(25.dp),
    horizontalArrangement = Arrangement.Center,
){
    Button(
        onClick = { setDialogVisibleForDel(true) },
        colors = ButtonDefaults.buttonColors(
            backgroundColor = Color.White,
            contentColor = Color.Red
        )
    ) {
        Text(text = "Delete")
    }
}
endsnippet

snippet compose_admob "kotlin_compose" i
// app/build.gradle
implementation 'com.google.android.gms:play-services-ads:20.4.0'

// app/src/main/AndroidManifest.xml
// 与 activity 平级
<!-- Sample AdMob app ID: ca-app-pub-3940256099942544~3347511713 -->
<meta-data
    android:name="com.google.android.gms.ads.APPLICATION_ID"
    android:value="ca-app-pub-3940256099942544~3347511713"/>

// Main Activity
import com.google.android.gms.ads.MobileAds
// setContent 下方
MobileAds.initialize(this) {}

// compose 
@Composable
fun AdvertView(modifier: Modifier = Modifier) {
    val isInEditMode = LocalInspectionMode.current
    if (isInEditMode) {
        Text(
            modifier = modifier
                .fillMaxWidth()
                .background(Color.Red)
                .padding(horizontal = 2.dp, vertical = 6.dp),
            textAlign = TextAlign.Center,
            color = Color.White,
            text = "Advert Here",
        )
    } else {
        AndroidView(
            modifier = modifier.fillMaxWidth(),
            factory = { context ->
                AdView(context).apply {
                    adSize = AdSize.BANNER
                    //adUnitId = context.getString(R.string.ad_id_banner)
                    adUnitId = "ca-app-pub-3940256099942544/6300978111"
                    loadAd(AdRequest.Builder().build())
                }
            }
        )
    }
}

@Preview(showBackground = true)
@Composable
fun AdvertPreview() {
    AdvertView()
}
endsnippet

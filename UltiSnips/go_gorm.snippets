snippet gorm_insert "go_gorm" i
$1 := models.${1/\w+\s*/\u$0/}
if result := models.DB.Create(&${1:item}); result.Error != nil {
    // Error 1062: Duplicate entry
}
endsnippet

snippet gorm_count "go_gorm" i
var count int64 = 0
models.DB.Model(&models.${1:MODEL}{}).
	Where("date = ?", date).
	Count(&count)
endsnippet

snippet gorm_count_distinct "go_gorm" i
var count int64 = 0
models.DB.Model(&${1:Model}{}).Distinct("name").Count(&count)
endsnippet

snippet gorm_table_name "go_gorm" i
func (${1:MODEL}) TableName() string {
	return "${2:TABLE_NAME}"
}
endsnippet

snippet gorm_find_one "go_gorm" i
var $1 models.${1/\w+\s*/\u$0/}
err := models.DB.Where("\`id\` = ?", id).First(&${1:item}).Error
if err != nil {
    // record not found
    log.Println(err)
}
endsnippet

snippet gorm_find_all "go_gorm" i
var ${1/\w+\s*/\l$0/}List []models.${1:Model}
models.DB.Find(&${1/\w+\s*/\l$0/}List)
endsnippet

snippet gorm_find_all_pagination "go_gorm" i
limit, _ := strconv.Atoi(c.Query("size"))
page, _ := strconv.Atoi(c.Query("page"))
status, _ := strconv.Atoi(c.DefaultQuery("status", "0"))
var items []models.${1:MODEL}
db := models.DB

if limit > 100 {
	limit = 100
}
if page < 1 {
	page = 1
}
if status > 0 {
	db = db.Where("status", status)
}

db.Where("field = ?", VAR).
	Order("id asc").
	Limit(limit).
	Offset((page - 1) * limit).
	Find(&items)
endsnippet

snippet gorm_order "go_gorm" i
Order("id asc").
endsnippet

snippet gorm_save "go_gorm" i
models.DB.Save(&${1:MODEL_OBJECT})
endsnippet

snippet gorm_update_using_select "go_gorm 可以更新零值" i
models.DB.Select("field1", "field2").Updates(${1:object})
endsnippet

snippet gorm_delete "go_gorm" i
models.DB.Delete(&${1:MODEL_OBJECT})
endsnippet

snippet gorm_delete_hard "go_gorm" i
models.DB.Unscoped().Delete(&${1:MODEL_OBJECT})
endsnippet

snippet gorm_update_by_add "go_gorm" i
models.DB.Model(&models.${1:StructName}{}).
    Where("id = ?", ${2:ID}).
    Update("${3:field}", gorm.Expr("$3 + ?", 1))
endsnippet

snippet struct_with_gorm_model "go_gorm" i
type ${1:NAME} struct {
    gorm.Model
	Name    string `json:"name"`
}

func ($1) TableName() string {
	return "${2:TABLE_NAME}"
}
endsnippet

snippet struct_with_table_name "go_gorm" i
type ${1:NAME} struct {
	Name    string `json:"name"`
    CreatedAt time.Time
}

func ($1) TableName() string {
	return "${2:TABLE_NAME}"
}
endsnippet

snippet gorm_lock_for_update "go_gorm" i
var $1 models.${1/\w+\s*/\u$0/}

models.DB.Transaction(func(tx *gorm.DB) error {
    // 在事务中执行一些 db 操作（从这里开始，您应该使用 'tx' 而不是 'db'）
    // 返回任何错误都会回滚事务
    var err error

    err = tx.Clauses(clause.Locking{Strength: "UPDATE"}).
        Where("status", 0).
        First(&${1:item}).
        Error

    if err != nil {
        // record not found
        log.Println(err)
        return err
    }
    tx.Model(&$1).Update("status", 1)

    // 返回 nil 提交事务
    return nil
})
endsnippet

snippet gorm_raw_sql "go_gorm" i
models.DB.Exec(`
    UPDATE user 
    SET status = 0
    WHERE status = 1 AND updated_at < NOW() - INTERVAL 21 DAY
`)
endsnippet


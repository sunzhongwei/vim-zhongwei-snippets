###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet if "Description" b
if (${1:CONDITION}) {
	${2:// TODO}
}
endsnippet

snippet focus_end "Description" b
this.selectionStart = this.selectionEnd = this.value.length;
endsnippet

snippet len "length" i
${1:VAR}.length
endsnippet

snippet set_timeout "Description" i
setTimeout(() => {
	${1:// code...}
}, 1000);
endsnippet

snippet set_timeout_sync "javascript" i
function wait(ms) {
    return new Promise((resolve, reject) => {
        setTimeout(() => {
            resolve(ms)
        }, ms)
    })
}

async task1 function () {
    console.log("do some action 1 ...");
    await wait(5000);
    console.log("do some action 2 ...");
    await wait(5000);
    console.log("do some action 3 ...");
}

task1();
endsnippet

snippet set_timeout_sync_call "javascript" i
(async () => {
  await wait(3000);
  ${1:// DO SOMETHING}
})();
endsnippet

snippet promise "javascript" i
return new Promise((resolve, reject) => {
    ${1:// TODO}
})
endsnippet

snippet set_interval "Description" i
let intervalId = setInterval(() => {
	${1:// code...}
}, 1000);
clearInterval(intervalId);
endsnippet

snippet func "Description" i
function ${1:NAME}() {
	${2:// TODO}
}
endsnippet

snippet function_as_property "javascript" i
function() {
	${VISUAL}$0
},
endsnippet

snippet trim "Description" i
${1:STRING}.trim()
endsnippet

snippet redirect "Description" b
window.location.href = "${1:URL}";
endsnippet

snippet url "Description" i
var url = window.location.href;
endsnippet

snippet title "Description" i
var title = document.getElementsByTagName("title")[0].innerHTML;
endsnippet

snippet slice "Description" i
${1:STRING}.slice(0, ${2:END});
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to var"
${1:var }${2:function_name} = function $2(${3}) {
	${VISUAL}$0
};
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ci "console.info" b
console.info(${1:"${2:value}"});
endsnippet

snippet log "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.debug" b
console.debug(${1:"${2:value}"});
endsnippet

snippet cprof "console.profile" b
console.profile("${1:label}");
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:"${2:value}"});
endsnippet

snippet ctime "console.time" b
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp("${1:label}");
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn" b
console.warn(${1:"${2:value}"});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

snippet slugify "Description" i
function slugify(text) {
	return text.toString().toLowerCase()
		.replace(/\s+/g, '-')           // Replace spaces with -
		.replace(/[^\w\-]+/g, '')       // Remove all non-word chars
		.replace(/\-\-+/g, '-')         // Replace multiple - with single -
		.replace(/^-+/, '')             // Trim - from start of text
		.replace(/-+$/, '');            // Trim - from end of text
}
endsnippet

# -----------------------------------------------------------
# Selector
# -----------------------------------------------------------
snippet document_getElementById "get element" i
document.getElementById("${1:ID}")
endsnippet

snippet document_getElementById_value "Description" i
document.getElementById("${1:ID}").value
endsnippet

snippet document_find_one "Javascript" i
document.querySelector("${1:SELECTOR}")
endsnippet

snippet document_find_all "Javascript" i
document.querySelectorAll("${1:SELECTOR}")
endsnippet

snippet document_set_content "javascript" i
document.querySelector("${1:selector}").textContent = "${2:value}"
endsnippet

snippet try "Description" b
try {
	// TODO
} catch (e) {
	// TODO
} finally {
	// TODO
}
endsnippet

snippet cur "Description" i
new Date()
endsnippet

snippet var_dump "Description" b
alert(JSON.stringify(${1:OBJECT}, null, 4));
endsnippet

snippet ### "Description" i
// -----------------------------------------------------------
// ${1:DOC}
// -----------------------------------------------------------
endsnippet

snippet { "Description" i
{
	$0
}
endsnippet

# -----------------------------------------------------------
# local storage
# -----------------------------------------------------------
snippet storage_get "Description" i
let value = localStorage.getItem('${1:KEY}');
if(null === value) {
    value = 'Default Value';
}
endsnippet

snippet storage_set "Description" i
localStorage.setItem('${1:KEY}', ${2:VALUE});
endsnippet

# -----------------------------------------------------------
# JSON
# IE8 之后支持
# -----------------------------------------------------------
snippet json_dump "Description" i
JSON.stringify(${1:VAR});
endsnippet

snippet json_load "Description" i
JSON.parse(${1:VAR});
endsnippet

# -----------------------------------------------------------
# array
# -----------------------------------------------------------
snippet last "Description" i
slice(-1)[0]
endsnippet

snippet array_del_by_index "javascript" i
array.splice(index, 1);
endsnippet

snippet array_in "javascript" i
${1:Array}.includes(${2:Value})
endsnippet

snippet array_random_item "javascript" i
${1:items}[Math.floor(Math.random() * $1.length)]
endsnippet

# -----------------------------------------------------------
# object
# -----------------------------------------------------------
snippet object_keys_loop "javascript" i
for (const [key, value] of Object.entries(${1:object})) {
}
endsnippet

snippet object_keys "javascript" i
Object.keys(${1:object})
endsnippet

# -----------------------------------------------------------
# string
# -----------------------------------------------------------
snippet string_format "ES6 Template String" i
\`$\{${1:VAR1}\} - $\{${2:VAR2}\}\`
endsnippet


# -----------------------------------------------------------
# Browser Bookmark script
# -----------------------------------------------------------
snippet bookmark "Description" i
javascript:(function(){
	var title = document.getElementsByTagName("title")[0].innerHTML;
	var url = window.location.href;
	alert('[' + title + '](' + url + ')');
})();
endsnippet

snippet for_loop "Description" i
for (let ${1:item} of $1s) {
    ${2:// TODO}
}
endsnippet

snippet reload "Description" i
window.location.reload();
endsnippet

snippet confirm "Description" i
if (window.confirm("${1:您确认要删除？}")) {
	// TODO
}
endsnippet

# -----------------------------------------------------------
# http
# -----------------------------------------------------------
snippet fetch "javascript" i
fetch('${1:URL}')
    .then(function(rsp) {
        console.log(rsp);
        return rsp.json();
    }).then(function(json) {
        console.log(json);
    });
endsnippet

snippet sweet_success "javascript" i
Swal.fire(
    '成功！',
    '操作成功',
    'success'
);
endsnippet

snippet sweet_error "javascript" i
Swal.fire(
    '失败！',
    '操作失败',
    'error'
);
endsnippet

snippet sweet_input "javascript" i
// https://cdn.staticfile.org/limonte-sweetalert2/8.11.8/sweetalert2.all.min.js
const {value: input_value} = await Swal.fire({
  title: '快递单号',
  input: 'text',
  showCancelButton: true,
  cancelButtonText: '取消',
  confirmButtonText: '确认',
  inputValidator: (value) => {
		return new Promise((resolve) => {
			if (!value) {
				resolve('不能为空')
			} else {
				resolve();
			}
		})
  }
});

if (!input_value) {
  Swal.fire(
    '信息不全！',
    '请填写完整信息',
    'error'
  );
  return;
}
endsnippet

snippet doc "javascript" i
/**
 * $1
 **/
endsnippet

snippet splice "javascript" i
arr.splice(index, 1)
endsnippet

snippet object_merge "javascript" i
let data = Object.assign({}, o1, o2);
endsnippet

snippet string_contain "javascript" i
if (str.indexOf('keyword') != -1) {
}
endsnippet

snippet switch "javascript" i
switch(${1:expression}) {
  case x:
    // code block
    break;
  case y:
    // code block
    break;
  default:
    // code block
}
endsnippet

snippet int "javascript" i
parseInt(${1:STRING})
endsnippet

snippet now_date "javascript" i
new Date().toISOString().slice(0, 10)
endsnippet

snippet arg_of_url "javascript" i
function argOfUrl(url, name) {
  if (!url) url = window.location.href;
  name = name.replace(/[\[\]]/g, "\\$&");
  var regex = new RegExp("[?&]" + name + "(=([^&#]*)|&|#|$)"),
    results = regex.exec(url);
  if (!results) return null;
  if (!results[2]) return '';
  return decodeURIComponent(results[2].replace(/\+/g, " "));
}
endsnippet

snippet url_param "javascript" i
const urlParams = new URLSearchParams(window.location.search);
const myParam = urlParams.get('myParam');
endsnippet

snippet input_radio_checked "javascript" i
document.querySelector("input[name='year'][value='2021']").checked = true;
endsnippet

snippet import "javascript" i
import ${1/\w+\s*/\u$0/} from './${1:module}.js';
endsnippet

snippet map_reduce "javascript" i
const maxWidth = $1s.reduce(
	(previousValue, ${1:item}) => Math.max(previousValue, $1.width),
	0
);
endsnippet

snippet http_await "javascript" i
try {
  const rsp = await someAPI({ ID: record.ID });
  if (rsp.err_code === 0) {
    message.success('请求成功');
  } else {
    message.error(`请求失败：${rsp.err_msg}`);
  }
} catch (error) {
  message.error('请求失败请重试！');
}
endsnippet

# vim:ft=snippets:

###########################################################################
#                            TextMate Snippets                            #
###########################################################################
snippet if "Description" b
if (${1:CONDITION}) {
	${2:// TODO}
}
endsnippet

snippet focus_end "Description" b
this.selectionStart = this.selectionEnd = this.value.length;
endsnippet

snippet len "length" i
${1:VAR}.length
endsnippet

snippet setTimeout "Description" i
setTimeout(function() {
	${1:// code...}
}, 1000);
endsnippet

snippet setInterval "Description" i
setInterval(function() {
	${1:// code...}
}, 1000);
endsnippet

snippet func "Description" i
function() {
	${1:// TODO}
}
endsnippet

snippet trim "Description" i
${1:STRING}.trim()
endsnippet

snippet redirect "Description" b
window.location.href = "${1:URL}";
endsnippet

snippet curlink "Description" i 
window.location.href 
endsnippet

snippet slice "Description" i
${1:STRING}.slice(0, ${2:END});
endsnippet

snippet '':f "object method string"
'${1:${2:#thing}:${3:click}}': function(element) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :f "Object Method"
${1:method_name}: function(${3:attribute}) {
	${VISUAL}$0
}${10:,}
endsnippet

snippet :, "Object Value JS"
${1:value_name}: ${0:value},
endsnippet

snippet : "Object key key: 'value'"
${1:key}: ${2:"${3:value}"}${4:, }
endsnippet

snippet proto "Prototype (proto)"
${1:class_name}.prototype.${2:method_name} = function(${3:first_argument}) {
	${VISUAL}$0
};

endsnippet

snippet for "for (...) {...} (counting up)" b
for (var ${1:i} = 0, ${2:len} = ${3:Things.length}; $1 < $2; $1++) {
	${VISUAL}$0
}
endsnippet

snippet ford "for (...) {...} (counting down, faster)" b
for (var ${2:i} = ${1:Things.length} - 1; $2 >= 0; $2--) {
	${VISUAL}$0
}
endsnippet

snippet fun "function (fun)"
function ${1:function_name}(${2:argument}) {
	${VISUAL}$0
}
endsnippet

snippet vf "Function assigned to var"
${1:var }${2:function_name} = function $2(${3}) {
	${VISUAL}$0
};
endsnippet

snippet iife "Immediately-Invoked Function Expression (iife)"
(function (${1:argument}) {
	${VISUAL}$0
}(${2:$1}));
endsnippet

snippet timeout "setTimeout function"
setTimeout(function() {
	${VISUAL}$0
}, ${1:10});
endsnippet

snippet fi "for prop in obj using hasOwnProperty" b
for (${1:prop} in ${2:obj}){
	if ($2.hasOwnProperty($1)) {
		${VISUAL}$0
	}
}
endsnippet

# Snippets for Console Debug Output

snippet ca "console.assert" b
console.assert(${1:assertion}, ${2:"${3:message}"});
endsnippet

snippet cclear "console.clear" b
console.clear();
endsnippet

snippet cdir "console.dir" b
console.dir(${1:object});
endsnippet

snippet cdirx "console.dirxml" b
console.dirxml(${1:object});
endsnippet

snippet ce "console.error" b
console.error(${1:"${2:value}"});
endsnippet

snippet cgroup "console.group" b
console.group("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet cgroupc "console.groupCollapsed" b
console.groupCollapsed("${1:label}");
${VISUAL}$0
console.groupEnd();
endsnippet

snippet ci "console.info" b
console.info(${1:"${2:value}"});
endsnippet

snippet cl "console.log" b
console.log(${1:"${2:value}"});
endsnippet

snippet cd "console.debug" b
console.debug(${1:"${2:value}"});
endsnippet

snippet cprof "console.profile" b
console.profile("${1:label}");
${VISUAL}$0
console.profileEnd();
endsnippet

snippet ctable "console.table" b
console.table(${1:"${2:value}"});
endsnippet

snippet ctime "console.time" b
console.time("${1:label}");
${VISUAL}$0
console.timeEnd("$1");
endsnippet

snippet ctimestamp "console.timeStamp" b
console.timeStamp("${1:label}");
endsnippet

snippet ctrace "console.trace" b
console.trace();
endsnippet

snippet cw "console.warn" b
console.warn(${1:"${2:value}"});
endsnippet

# AMD (Asynchronous Module Definition) snippets

snippet def "define an AMD module"
define(${1:optional_name, }[${2:'jquery'}], ${3:callback});
endsnippet

snippet req "require an AMD module"
require([${1:'dependencies'}], ${2:callback});
endsnippet

snippet slugify "Description" i
function slugify(text) {
	return text.toString().toLowerCase()
		.replace(/\s+/g, '-')           // Replace spaces with -
		.replace(/[^\w\-]+/g, '')       // Remove all non-word chars
		.replace(/\-\-+/g, '-')         // Replace multiple - with single -
		.replace(/^-+/, '')             // Trim - from start of text
		.replace(/-+$/, '');            // Trim - from end of text
}
endsnippet

snippet get "get element" i
document.getElementById("${1:ID}")
endsnippet

snippet getInput "Description" i
document.getElementById("${1:ID}").value
endsnippet

snippet try "Description" b
try {
	// TODO
}
catch (e) {
	// TODO
}
endsnippet

snippet cur "Description" i
new Date()
endsnippet

snippet var_dump "Description" b
alert(JSON.stringify(${1:OBJECT}, null, 4));
endsnippet

snippet ### "Description" i
// -----------------------------------------------------------
// ${1:DOC}
// -----------------------------------------------------------
endsnippet

snippet { "Description" i
{
	$0
}
endsnippet

# -----------------------------------------------------------
# local storage 
# -----------------------------------------------------------
snippet ls_get "Description" i
localStorage.getItem('${1:KEY}');
endsnippet

snippet ls_set "Description" i
localStorage.setItem('${1:KEY}', ${2:VALUE});
endsnippet

# -----------------------------------------------------------
# JSON 
# IE8 之后支持
# -----------------------------------------------------------
snippet json_dump "Description" i
JSON.stringify(${1:VAR});
endsnippet

snippet json_load "Description" i
JSON.parse(${1:VAR});
endsnippet


# vim:ft=snippets:

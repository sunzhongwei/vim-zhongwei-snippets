snippet http_get "cs" i
// TODO: modify function: private async void Button_Click_Asyn
// TODO: using Newtonsoft.Json;

Windows.Web.Http.HttpClient httpClient = new Windows.Web.Http.HttpClient();
var headers = httpClient.DefaultRequestHeaders;
string header = "ie";
if (!headers.UserAgent.TryParseAdd(header))
{
	throw new Exception("Invalid header value: " + header);
}

header = "Mozilla/5.0 (compatible; MSIE 10.0; Windows NT 6.2; WOW64; Trident/6.0)";
if (!headers.UserAgent.TryParseAdd(header))
{
	throw new Exception("Invalid header value: " + header);
}

String url = "http://www.baidu.com";
Uri requestUri = new Uri(url);

//Send the GET request asynchronously and retrieve the response as a string.
Windows.Web.Http.HttpResponseMessage httpResponse = new Windows.Web.Http.HttpResponseMessage();
string httpResponseBody = "";

try
{
	//Send the GET request
	httpResponse = await httpClient.GetAsync(requestUri);
	httpResponse.EnsureSuccessStatusCode();
	httpResponseBody = await httpResponse.Content.ReadAsStringAsync();
	dynamic result = JsonConvert.DeserializeObject(httpResponseBody);
	// TODO: result.data.something
}
catch (Exception ex)
{
	httpResponseBody = "Error: " + ex.HResult.ToString("X") + " Message: " + ex.Message;
}
endsnippet

snippet http_post "cs" i
// TODO:
// using System.Net.Http;
// using Newtonsoft.Json;
// private async void Button_Click_Asyn
var dict = new Dictionary<string, string>();
dict.Add("Input1", "TEST2");
dict.Add("Input2", "TEST2");
var client = new HttpClient();
String url = "";
var req = new HttpRequestMessage(HttpMethod.Post, url) { Content = new FormUrlEncodedContent(dict) };
try
{
	var res = await client.SendAsync(req);
	res.EnsureSuccessStatusCode();
	var httpResponseBody = await res.Content.ReadAsStringAsync();
	dynamic result = JsonConvert.DeserializeObject(httpResponseBody);
	// TODO: result.data.something
}
catch (Exception ex)
{
	httpResponseBody = "Error: " + ex.HResult.ToString("X") + " Message: " + ex.Message;
}
endsnippet

snippet string_to_stream "cs" i
// TODO
// using Windows.Storage.Streams;
// using Windows.Security.Cryptography;
IBuffer buffUTF8 = CryptographicBuffer.ConvertStringToBinary(${1:STRING}, BinaryStringEncoding.Utf8);
endsnippet

snippet log "cs" i
Console.WriteLine(${1:VALUE});
endsnippet

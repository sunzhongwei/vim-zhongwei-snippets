snippet init "Description" b
composer create-project --prefer-dist laravel/laravel ${1:PROJECT_NAME} "5.2.*"
endsnippet

snippet key "generate key" b
php artisan key:generate
endsnippet

snippet server "start server" b
php artisan serve --port=9090
endsnippet

snippet l_pn "simple pagination" b
$${1:items} = DB::table('$1')->simplePaginate(15);
return view('${2:template}', [
	'$1'	=> $$1,
]);
endsnippet

snippet route "route with controller" b
Route::get('user/{id}', [
	'uses' => 'Path/FooController@method', 
	'as' => 'name',
]);
endsnippet

snippet route_request "route with request" b
Route::post('/task', function (Request $request) {
	//
});
endsnippet

snippet func "laravel controller method" b
public function ${1:METHOD}(Request $request, $${2:param}) {
	return view('${3:TEMPLATE}', [
		"${4:VAR}" => $$4,
	]);
}
endsnippet

snippet redirect "redirect" b
return redirect()->route('${1:namedRoute}');
endsnippet

snippet named_route "named route" b
Route::get('user/profile', ['as' => 'profile', function () {
	//
}]);
endsnippet

snippet csrf "The csrf_field helper function generates the csrf HTML" b
{{ csrf_field() }}
endsnippet

snippet log "log" b
use Log;
Log::info('${1:This is some useful information.}');
endsnippet

snippet debug_log "debug log" b
error_log('${1:Some message here.}');
endsnippet

snippet string "string" b
$table->string('${1:field_name}', ${2:length});
endsnippet

snippet text "text" b
$table->text('${1:field_name}');
endsnippet

snippet int "integer" b
$table->integer('${1:field_name}')->default(${2:default_value})->unsigned();
endsnippet

snippet unique "unique" b
$table->unique('${1:field_name}');
endsnippet

snippet index "index" b
$table->index('${1:field_name}');
endsnippet

snippet primary "primary" b
$table->primary('${1:field_name}');
endsnippet

snippet foreign "foreign key" b
$table->integer('${1:field_name}_id')->unsigned();
$table->foreign('$1_id')->references('id')->on('${2:table_name}');
endsnippet

snippet table "table" b
protected $table = '${1:table_name}';
endsnippet

snippet belongsTo "one2many belongsTo" b
public function ${1:item}() {
	return $this->belongsTo('App\\${2:Model}', '${3:foreign_key}', '${4:other_key}');
}
endsnippet

snippet hasMany "one2many hasMany" b
public function ${1:items}() {
	return $this->hasMany('App\\${2:Model}', '${3:foreign_key}', '${4:other_key}');
}
endsnippet

snippet belongsToMany "many2many belongsToMany" b
public function ${1:items}() {
	return $this->hasMany('App\\${2:Model}', '${3:relationship_table_name}', 
		'${4:model_id}', '${5:join_id}');
}
endsnippet

snippet get "get" b
$${1:item} = ${2:Model}::where('${3:field}', ${4:value})->firstOrFail();
use App\\$2;
endsnippet

snippet query "query" b
$${1:items} = ${2:Model}::where('${3:field}', ${4:value})->get();
endsnippet

snippet view "view" b
return view('${1:template}', [
	'${2:key}'	=> $${3:value},
]);
endsnippet

snippet seed "seed" b
DB::table('${1:table_name}')->insert([
	'name' => str_random(10),
	'email' => str_random(10).'@gmail.com',
]);
endsnippet

snippet arg "request argument" b
$request->${1:arg_name};
endsnippet

snippet ip "Description" i
$request->ip();
endsnippet

snippet select "Description" i
DB::select("
	${1:select * from }
");
endsnippet

snippet update "Description" i
$affected = DB::update("
	update users set votes = 100 where name = ?
", ['John']);
endsnippet

snippet queue "steps to create queue" b
php artisan queue:table
php artisan queue:failed-table
php artisan migrate

# .env
QUEUE_DRIVER=database

# create worker
php artisan make:job ${1:DoSomething} 
vim app/Jobs/${1}.php

# create seeder
php artisan make:controller SomeController

# start worker
php artisan queue:listen
endsnippet

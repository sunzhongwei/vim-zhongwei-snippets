#resource controller
snippet l_rsc "Laravel resource controller" b
/*!
 * \class       $1
 *
 * \author      ${3:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

class ${1:`!v expand('%:t:r')`} extends ${2:BaseController} {
    function __construct() {
    }
    
    public function index() {
    }
    
    public function create() {
    }
    
    public function store() {
    }
    
    public function show($id) {
    }
    
    public function edit($id) {
    }
    
    public function update($id) {
    }
    
    public function destroy($id) {
    }
}
endsnippet

#service service provider
snippet l_ssp "Laravel service provider for service" b
/*!
 * \namespace   $1
 * \class       $2
 *
 * \author      ${3:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace ${1:Services};

use Illuminate\Support\ServiceProvider;

class ${2:`!v expand('%:t:r')`} extends ServiceProvider {
    
    public function register() {
        $this->app->bind('${4}Service', function ($app) {
            return new ${5}(
                $app->make('Repositories\\${6}Interface')
            );
        });
    }
}
endsnippet

#repository service provider
snippet l_rsp "Laravel service provider for repository" b
/*!
 * \namespace   $2
 * \class       $3
 *
 * \author      ${4:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace ${2:Repositories\\${1:}};

use Entities\\$1;
use $2\\$1Repository;
use Illuminate\Support\ServiceProvider;

class ${3:`!v expand('%:t:r')`} extends ServiceProvider {
    /*!
     * \var     defer
     * \brief   Defer service
     */
    protected $defer = ${5:true};

    public function register() {
        $this->app->bind('$2\\$1Interface', function($app) {
            return new $1Repository(new $1());
        });
    }

    /*!
     * \brief   If $defer == true need this fn
     */ 
    public function provides() {
        return ['$2\\$1Interface'];
    }
}
endsnippet

#model
snippet l_md "Laravel simple model" b
/*!
 * \namespace   $1
 * \class       $2
 *
 * \author      ${3:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace ${1:Entities};

class ${2:`!v expand('%:t:r')`} extends \Eloquent {
    protected $table   = '${4:`!p snip.rv = t[2].lower()`}';

    public $timestamps = ${5:false};

    protected $hidden  = array(${6});

    protected $guarded = array(${7:'id'});
}
endsnippet

#abstract repository
snippet l_ar "Laravel abstract Repository" b
/*!
 * \namespace   $1
 * \class       $2
 * \implements  $3
 *
 * \author      ${4:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace ${1:Repositories};

use Illuminate\Database\Eloquent\Model;

abstract class ${2:`!v expand('%:t:r')`} implements ${3:BaseRepositoryInterface} {
    protected $model;

    /*!
     * \fn      __construct
     *
     * \brief   Take the model
     */

    public function __construct(Model $model) {
        $this->model = $model;
    }

    /*!
     * \fn      all
     *
     * \return  Illuminate\Database\Eloquent\Collection
     */
    public function all($columns = array('*')) {
        return $this->model->all()->toArray();
    }

    /*!
     * \fn      create
     *
     * \return  Illuminate\Database\Eloquent\Model
     */
    public function create(array $attributes) {
        return $this->model->create($attributes);
    }

    /*!
     * \fn      destroy
     *
     * \return  int
     */
    public function destroy($ids) {
        return $this->model->destroy($ids);
    }

    /*!
     * \fn      find
     *
     * \return  mixed
     */
    public function find($id, $columns = array('*')) {
        return $this->model->find($id, $columns);
    }
}
endsnippet

#repository
snippet l_r "Laravel Repository" b
/*!
 * \namespace   $1
 * \class       $3
 * \implements  $4
 *
 * \author      ${5:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace ${1:Repositories\\${2}};

class ${3:`!v expand('%:t:r')`} extends \\${6} implements ${4:$3RepositoryInterface} {
    ${7}
}
endsnippet

#service
snippet l_s "Laravel Service" b
/*!
 * \namespace   $1
 * \class       $2
 *
 * \author      ${6:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace Services\\${1};

use ${3:Repositories\\${4:Interface}};

class ${2:`!v expand('%:t:r')`} {
    protected $${5:repo};
    
    /*!
     * \fn      __construct
     */
    public function __construct($4 $repo) {
        $this->$5 = $repo;
    }
}
endsnippet

#facade
snippet l_f "Laravel Facade" b
/*!
 * \namespace   $1
 * \class       $2
 *
 * \author      ${5:`!v g:snips_author`}
 * \date        `!v strftime('%d-%m-%y')`
 */

namespace ${1:Services};

use \Illuminate\Support\Facades\Facade;

class ${2:`!v expand('%:t:r')`} extends Facade {
    /*!
     * \fn          getFacadeAccessor
     *
     * \return      string
     */
    protected static function getFacadeAccessor() { return '${4:${3}Service}'; }
}
endsnippet

snippet l_pn "simple pagination" b
$${1:items} = DB::table('$1')->simplePaginate(15);
return view('${2:template}', [
	'$1'	=> $$1,
]);
endsnippet

snippet route "route with controller" b
Route::get('user/{id}', [
	'uses' => 'Path/FooController@method', 
	'as' => 'name',
]);
endsnippet

snippet route_request "route with request" b
Route::post('/task', function (Request $request) {
	//
});
endsnippet

snippet cm "controller method" b
public function ${1:method}(Request $request, $${2:param}) {
	$this->validate($request, [
		'title' => 'required|unique:posts|max:255',
		'body' => 'required',
	]);
}
endsnippet

snippet redirect "redirect" b
return redirect()->route('${1:namedRoute}');
endsnippet

snippet named_route "named route" b
Route::get('user/profile', ['as' => 'profile', function () {
	//
}]);
endsnippet

snippet csrf "The csrf_field helper function generates the csrf HTML" b
{{ csrf_field() }}
endsnippet

snippet log "log" b
use Log;
Log::info('${1:This is some useful information.}');
endsnippet

snippet debug_log "debug log" b
error_log('${1:Some message here.}');
endsnippet

snippet string "string" b
$table->string('${1:field_name}', ${2:length});
endsnippet

snippet text "text" b
$table->text('${1:field_name}');
endsnippet

snippet int "integer" b
$table->integer('${1:field_name}')->default(${2:default_value})->unsigned();
endsnippet

snippet unique "unique" b
$table->unique('${1:field_name}');
endsnippet

snippet index "index" b
$table->index('${1:field_name}');
endsnippet

snippet primary "primary" b
$table->primary('${1:field_name}');
endsnippet

snippet foreign "foreign key" b
$table->integer('${1:field_name}_id')->unsigned();
$table->foreign('$1_id')->references('id')->on('${2:table_name}');
endsnippet

snippet table "table" b
protected $table = '${1:table_name}';
endsnippet

snippet belongsTo "one2many belongsTo" b
public function ${1:item}() {
	return $this->belongsTo('App\\${2:Model}', '${3:foreign_key}', '${4:other_key}');
}
endsnippet

snippet hasMany "one2many hasMany" b
public function ${1:items}() {
	return $this->hasMany('App\\${2:Model}', '${3:foreign_key}', '${4:other_key}');
}
endsnippet

snippet belongsToMany "many2many belongsToMany" b
public function ${1:items}() {
	return $this->hasMany('App\\${2:Model}', '${3:relationship_table_name}', 
		'${4:model_id}', '${5:join_id}');
}
endsnippet

snippet get "get" b
$${1:item} = ${2:Model}::where('${3:field}', ${4:value})->firstOrFail();
use App\\$2;
endsnippet

snippet query "query" b
$${1:items} = ${2:Model}::where('${3:field}', ${4:value})->get();
endsnippet

snippet view "view" b
return view('${1:template}', [
	'${2:key}'	=> $${3:value},
]);
endsnippet

snippet seed "seed" b
DB::table('${1:table_name}')->insert([
	'name' => str_random(10),
	'email' => str_random(10).'@gmail.com',
]);
endsnippet

snippet arg "request argument" b
$request->${1:arg_name};
endsnippet

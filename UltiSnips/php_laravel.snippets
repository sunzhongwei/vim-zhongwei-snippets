snippet init "Description" b
composer create-project --prefer-dist laravel/laravel ${1:PROJECT_NAME} "5.2.*"
endsnippet

snippet key "generate key" b
php artisan key:generate
endsnippet

snippet server "start server" b
php artisan serve --port=9090
endsnippet

snippet l_pn "simple pagination" b
$${1:items} = DB::table('$1')->simplePaginate(15);
return view('${2:template}', [
	'$1'	=> $$1,
]);
endsnippet

snippet route "route with controller" b
Route::get('user/{id}', [
	'uses' => 'Path/FooController@method', 
	'as' => 'name',
]);
endsnippet

snippet route_request "route with request" b
Route::post('/task', function (Request $request) {
	//
});
endsnippet

snippet function_laravel_view "laravel controller method" b
public function ${1:METHOD}(Request $request, $${2:param}) {
	return view('${3:TEMPLATE}', [
		"${4:VAR}" => $$4,
	]);
}
endsnippet

snippet redirect "redirect" b
return redirect()->route('${1:namedRoute}');
endsnippet

snippet named_route "named route" b
Route::get('user/profile', ['as' => 'profile', function () {
	//
}]);
endsnippet

snippet csrf "The csrf_field helper function generates the csrf HTML" b
{{ csrf_field() }}
endsnippet

snippet log "log" b
use Log;
Log::info('${1:This is some useful information.}');
endsnippet

snippet debug_log "debug log" b
error_log('${1:Some message here.}');
endsnippet

snippet string "string" b
$table->string('${1:field_name}', ${2:length})->nullable();
endsnippet

snippet text "text" b
$table->text('${1:field_name}')->nullable();
endsnippet

snippet int "integer" b
$table->integer('${1:field_name}')->default(${2:default_value})->unsigned();
endsnippet

snippet unique "unique" b
$table->unique('${1:field_name}');
endsnippet

snippet index "index" b
$table->index('${1:field_name}');
endsnippet

snippet primary "primary" b
$table->primary('${1:field_name}');
endsnippet

snippet foreign "foreign key" b
$table->integer('${1:field_name}_id')->unsigned();
$table->foreign('$1_id')->references('id')->on('${2:table_name}');
endsnippet

snippet table "table" b
protected $table = '${1:table_name}';
endsnippet

snippet belongsTo "one2many belongsTo" b
public function ${1:item}() {
	return $this->belongsTo('App\\${2:Model}', '${3:foreign_key}', '${4:other_key}');
}
endsnippet

snippet hasMany "one2many hasMany" b
public function ${1:items}() {
	return $this->hasMany('App\\${2:Model}', '${3:foreign_key}', '${4:other_key}');
}
endsnippet

snippet belongsToMany "many2many belongsToMany" b
public function ${1:items}() {
	return $this->hasMany('App\\${2:Model}', '${3:relationship_table_name}', 
		'${4:model_id}', '${5:join_id}');
}
endsnippet

snippet get_first "laravel firstOrFail" i
$${1:item} = ${2:Model}::where('${3:field}', ${4:value})->firstOrFail();
use App\\$2;
endsnippet

snippet get_many "laravel get" b
$${1:items} = ${2:Model}::where('${3:field}', ${4:value})->get();
endsnippet

snippet get_many_limit "laravel get" b
$${1:items} = ${2:Model}::select('field1', 'field2')
	->where('${3:field}', ${4:value})
	->orderBy('name', 'desc')	
	->take(10)
	->get();
endsnippet

snippet del "delete" b
${2:Model}::where('${3:field}', ${4:value})->delete();
endsnippet

snippet view "view" b
return view('${1:template}', [
	'${2:key}'	=> $${3:value},
]);
endsnippet

snippet seed "seed" b
DB::table('${1:table_name}')->insert([
	'name' => str_random(10),
	'email' => str_random(10).'@gmail.com',
]);
endsnippet

snippet arg "request argument" i
$request->get('${1:arg_name}', '');
endsnippet

snippet ip "Description" i
$request->ip();
endsnippet

snippet select "Description" i
DB::select("
	${1:select * from }
");
endsnippet

snippet db_get "Description" i
$result = DB::select("
	select value from store_info
	where `key` = ?
	limit 1
", ['deposit']);

$deposit = 100;
if (count($result)) {
	$deposit = $result[0]->value;
}
endsnippet

snippet update "Description" i
$affected = DB::update("
	update users set votes = 100 where name = ?
", ['John']);
endsnippet

snippet queue "steps to create queue" b
php artisan queue:table
php artisan queue:failed-table
php artisan migrate

# .env
QUEUE_DRIVER=database

# create worker
php artisan make:job ${1:DoSomething} 
vim app/Jobs/${1}.php

# create seeder
php artisan make:controller SomeController

# start worker
php artisan queue:listen
endsnippet

snippet locale "Description" i
'locale' => 'zh-CN',
endsnippet

snippet timezone "Description" i
'timezone' => 'Asia/Shanghai',
endsnippet	

snippet json "Description" i
return response()->json([
	'${3:VAR}' => $$3,
]);
endsnippet

snippet transaction "Description" i
DB::transaction(function () use (${1:VAR}) {
	DB::table('users')->update(['votes' => 1]);

	DB::table('posts')->delete();

	echo $1;
});
endsnippet

snippet function_laravel_api "Description" i
public function ${1:METHOD}(Request $request, $${2:param}) {
	$user = $request->user();
	$rsp = Utils::get_rsp_json();
	// $rsp = ['err_code' => 0, 'err_msg' => 'OK',];
	$offset = $request->get('offset', 0);
	$limit = $request->get('limit', 5);
	if ($limit > 50) {
		$limit = 10;
	}

	$rsp['data'] = null;
	return response()->json($rsp);
}
endsnippet

snippet mutator "Description" i
public function setFirstNameAttribute($value)
{
	$this->attributes['first_name'] = strtolower($value);
}
endsnippet

snippet whereIn "php_laravel" i
whereIn('id', [1, 2, 3])
endsnippet

snippet join_collection "php_laravel" i
implode('-');
endsnippet

snippet foreach_collect "php_laravel" i
foreach ($items as $item) {
	// TODO	
}
endsnippet

snippet create_if_not_exist "php_laravel" i
$item = Item::firstOrNew(['name' => 'Flight 10']);
$item->save();
endsnippet

snippet duplicate "php_laravel" i
try {
	$user_coupon->save();
} catch (\Illuminate\Database\QueryException $e){
	$errorCode = $e->errorInfo[1];
	if($errorCode == 1062){
		$rsp['err_code'] = Error::DUPLICATE;
		$rsp['err_msg'] = '不能重复领取同一优惠券';
	}
}
endsnippet

snippet try_catch_laravel "php_laravel" i
try {
	// TODO
} catch (\Throwable $e) {
	Log::info($e->getMessage());
}
endsnippet

snippet redis "php_laravel" i
use Illuminate\Support\Facades\Redis;
$user = Redis::get('user:profile:'.$id);
Redis::set('name', 'Taylor');
endsnippet

snippet use_model "php_laravel" i
use App\Models\\${1:VALUE};
endsnippet

snippet use_request "php_laravel" i
use Illuminate\Http\Request;
endsnippet

snippet ymd_laravel "php_laravel" i
format('Y-m-d')
endsnippet

snippet today "php_laravel" i
use Carbon\Carbon;
Carbon::today()->toDateString();
endsnippet

snippet required "php_laravel" i
'${1:NAME}' => 'required'
'$1.required' => '请设置 $1',
endsnippet

snippet view_composer "php_laravel" i
use Illuminate\Support\Facades\View;

View::composer('${1:BLADE_NAME}', function ($view) {
    ${2:// TODO}
    $view->with('var1', 'value1')
         ->with('var2', 'value2');
});
endsnippet

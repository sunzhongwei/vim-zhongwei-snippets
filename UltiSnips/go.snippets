snippet golang "go" i
package main

import (
	"fmt"
)

func main() {
	fmt.Println("Hello world")
}
endsnippet

snippet print "go" i
fmt.Println(${1:VAR})
endsnippet

snippet print_format "go" i
fmt.Printf("%d", s)
endsnippet

snippet string_format "go" i
fmt.Sprintf("%s %d", "age: ", 18)
endsnippet

snippet log "go" i
log.Println(${1:VAR})
endsnippet

snippet log_detail "go" i
log.Printf("%+v\n", ${1:VAR})
endsnippet

snippet log_debug "go" i
log.Println("---------------- debug start ------------------")
log.Println(${1:VAR})
log.Println("---------------- debug end ------------------")
endsnippet

snippet log_type "go" i
log.Println("---------------- debug start ------------------")
log.Println(reflect.TypeOf(${1:VAR}))  // language.Tag
log.Println(reflect.TypeOf($1).Kind())  // struct
log.Println("---------------- debug end ------------------")
endsnippet

snippet for "go" i
for i := 0; i < 10; i++ {
}
endsnippet

snippet err "go" i
if err != nil {
    log.Println(err)
}
endsnippet

snippet error_new "go" i
errors.New("${1:error_msg}")
endsnippet

snippet kv "go" i
"${1:KEY}": $1,
endsnippet

snippet test "go" i
import (
    "testing"
    "github.com/stretchr/testify/assert"
)

func Test${1:Function}(t *testing.T) {
    assert.Equal(t, ${2:VALUE}, $1("arg"))
}
endsnippet

snippet assert "go" i
assert.Equal(t, ${1:VALUE1}, ${2:VALUE2})
endsnippet

snippet trim "go" i
strings.TrimSpace(${1:VAR});
endsnippet

snippet func "go" i
func ${1:name}(${2:var} string) {
    ${3://TODO}
}
endsnippet

snippet int "go" i
strconv.Atoi(${1:STRING})
endsnippet

snippet str "go" i
strconv.Itoa(${1:INT})
endsnippet

snippet str_from_uint "go" i
strconv.FormatUint(uint64(${1:UINT}), 10)
endsnippet

snippet float64 "go" i
${2:FLOAT64}, _ := strconv.ParseFloat(${1:STR}, 64)
endsnippet

snippet split "go" i
strings.Split(${1:STRING}, ",")
endsnippet

snippet join "go" i
strings.Join(${1:slice}, ",")
endsnippet

snippet string_replace "go" i
strings.ReplaceAll(${1:STRING}, ${2:OLD}, ${3:NEW})
endsnippet

snippet append "go" i
$1 = append(${1:SLICE}, ${2:ITEM})
endsnippet

snippet json_encode "go" i
"encoding/json"
s, _ := json.Marshal(${1:SLICE})
endsnippet

snippet json_decode "go" i
"encoding/json"
json.Unmarshal([]byte(${1:STRING}), &${2:TARGET})
endsnippet

snippet cmd_arg "go" i
if len(os.Args) != 2 {
	fmt.Println("请输入文件名")
	return
}
fmt.Println(os.Args[1])
endsnippet

snippet struct "go" i
type ${1:NAME} struct {
	Name    string `json:"name"`
}
endsnippet

snippet create_file "go" i
file, err := os.Create("${1:FILE_NAME}")
if err != nil {
    log.Println(err)
}
defer file.Close()
endsnippet

snippet loop_slice "go" i
for i, v := range items {
	fmt.Printf("%d %s\n", i, v)
}
endsnippet

snippet global_slice "go" i
var s = []string{
	"1",
	"2",
}
endsnippet

snippet global_map "go" i
var ${1:KVs} = map[string]int{
    'key1': 1,
}
endsnippet

snippet global_const "go" i
const (
	debug = true
)
endsnippet

snippet global_var "go" i
var (
	debug = true
)
endsnippet

snippet ensure_dir "go" i
// ensure dir
dir := "./public/qrcode/"
if _, err := os.Stat(dir); os.IsNotExist(err) {
	os.MkdirAll(dir, os.ModePerm)
}
endsnippet

snippet len "go" i
len(${1:SLICE})
endsnippet

snippet time_today_string "go" i
today := time.Now().Local().Format("2006-01-02 15:04:05")
endsnippet

snippet time_sleep "go" i
time.Sleep(time.Millisecond*6000)
endsnippet

snippet time_now_string "go" i
time.Now().Format("2006-01-02 15:04:05")
endsnippet

snippet time_now "go" i
time.Now()
endsnippet

snippet time_ts "go" i
t := time.Now()
ts := t.Format("20060102_150405")
endsnippet

snippet datetime_format "go" i
Format("2006-01-02 15:04:05")
endsnippet

snippet switch "go" i
switch ${1:var} {
case 1:
    fmt.Println("one")
default:
    fmt.Println("default")
}
endsnippet

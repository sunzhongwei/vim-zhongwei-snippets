## Snippets from SnipMate, taken from
## https://github.com/scrooloose/snipmate-snippets.git

snippet str_slice "Description" 
mb_substr(${1:STRING}, 0, ${2:LENGTH})
endsnippet

## Note that array_slice() will reorder and reset the numeric array indices 
## by default. You can change this behaviour by setting preserve_keys to TRUE.
snippet array_slice "Description" i
$${1:OUTPUT} = array_slice($${2:INPUT}, $${3:OFFSET}, $${4:LENGTH}, true);
endsnippet

snippet random_item "random item" b
$items = [i1, i2, i3];
$items[array_rand($items)];
endsnippet

snippet range "python like range" b
foreach (range(0, ${1:total}) as $i) {
	echo $i;
}
endsnippet

snippet split "Description" i
explode(" ", $${1:STRING});
endsnippet

snippet join  "Description" i
join(' ', $${1:ARRAY})
endsnippet

snippet push "Description" i
array_push($${1:ARRAY}, $${2:ITEM})
endsnippet

snippet contain "Description" b
if (strpos($${1:STRING}, $${2:KEYWORD}) !== false) {
	${3:// TODO}
}
endsnippet

## this 用于类的实例，而 self 用于类
snippet this "this" i
$this->${1:SOMETHING}
endsnippet

snippet self "Description"
self::${1:SOMETHING}
endsnippet

snippet len "length of array" i
count($${1:VAR})
endsnippet

snippet strlen "length of string" i 
mb_strlen($${1:STRING})
endsnippet

snippet array "array"
$${1:arrayName} = array('${2}' => ${3});${4}
endsnippet

snippet def "def"
define('${1:VARIABLE_NAME}', ${2:'definition'});${3}
endsnippet

snippet do "do"
do {
	${2:// code... }
} while (${1:/* condition */});
endsnippet

snippet doc_f "doc_f"
/**
 * $2
 * @return ${4:void}
 * @author ${5:`!v g:snips_author`}
 **/
${1:public }function ${2:someFunc}(${3})
{${6}
}
endsnippet

snippet doc_i "doc_i"
/**
 * $1
 * @package ${2:default}
 * @author ${3:`!v g:snips_author`}
 **/
interface ${1:someClass}
{${4}
} // END interface $1"
endsnippet

snippet else "else"
else {
	${1:// code...}
}
endsnippet

snippet for "for"
for ($${2:i} = 0; $$2 < ${1:count}; $$2${3:++}) {
	${4:// code...}
}
endsnippet

snippet get "get"
$_GET['${1}']${2}
endsnippet

snippet if "if"
if (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet elif "elseif"
elseif (${1:/* condition */}) {
	${2:// code...}
}
endsnippet

snippet inc "inc"
include '${1:file}';${2}
endsnippet

snippet log "log"
error_log(var_export(${1}, true));${2}
endsnippet

snippet post "post"
$_POST['${1}']${2}
endsnippet

snippet req "req1"
require_once '${1:file}';${2}
endsnippet

snippet req1 "req1"
require_once '${1:file}';${2}
endsnippet

snippet session "session"
$_SESSION['${1}']${2}
endsnippet

snippet t "t"
$${1:retVal} = (${2:condition}) ? ${3:a} : ${4:b};${5}
endsnippet

snippet var "var"
var_export(${1});${2}
endsnippet

snippet getter "PHP Class Getter" b
/**
 * Getter for $1
 *
 * ${2:return string}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$3
}
endsnippet

snippet setter "PHP Class Setter" b
/**
 * Setter for $1
 *
 * @param ${2:string} $$1                                                                                                                               
 * @return ${3:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${4:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1)
{
    $this->$1 = $$1;$5

    ${6:return $this;}
}
$0
endsnippet

snippet gs "PHP Class Getter Setter" b
/**
 * Getter for $1
 *
 * return ${2:string}
 */
public function get${1/\w+\s*/\u$0/}()
{
    return $this->$1;$3
}

/**
 * Setter for $1
 *
 * @param $2 $$1
 * @return ${4:`!p snip.rv=snip.basename`}
 */
public function set${1/\w+\s*/\u$0/}(${5:${2/(void|string|int|integer|double|float|object|boolear|null|mixed|number|resource)|(.*)/(?1::$2 )/}}$$1)
{
    $this->$1 = $$1;$6

    ${7:return $this;}
}
$0
endsnippet

snippet func "Public function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
public function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pro "Protected function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
protected function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pri "Private function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
private function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pubs "Public static function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
public static function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pros "Protected static function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
protected static function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet pris "Private static function" b
/**
 * ${3:undocumented function}
 *
 * @return ${4:void}
 */
private static function ${1:name}(${2:$param})
{
	${VISUAL}${5:return null;}
}
$0
endsnippet

snippet fu "Function snip" b
function ${1:name}(${2:$param})
{
	${VISUAL}${3:return null;}
}
$0
endsnippet

snippet new "New class instance" b
$${1:variableName} = new ${2:${1/\w+\s*/\u$0/}}($3);
$0
endsnippet

snippet ife "if else"
if (${1:/* condition */}) {
	${2:// code...}
} else {
	${3:// code...}
}
$0
endsnippet

snippet ns "namespace declaration" b
namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};
endsnippet

snippet class "Class declaration template" b
<?php

namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Class ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
class $1
{
}
endsnippet

snippet interface "Interface declaration template" b
<?php

namespace ${1:`!p
abspath = os.path.abspath(path)
m = re.search(r'[A-Z].+(?=/)', abspath)
if m:
	snip.rv = m.group().replace('/', '\\')
`};

/**
 * Interface ${1:`!p snip.rv=snip.basename`}
 * @author ${2:`!v g:snips_author`}
 */
interface $1
{
	public function ${3:someFunction}();$4                                                                                                              
}
endsnippet


snippet construct "__construct()" b
/**
 * @param $2mixed ${1/, /\n     * \@param mixed /g}
 */
public function __construct(${1:$dependencies})
{${1/\$(\w+)(, )*/\n        $this->$1 = $$1;/g}
}
$0
endsnippet

snippet ve "Dumb debug helper in HTML"
    echo '<pre>' . var_export($1, 1) . '</pre>';$0
endsnippet

snippet pc "Dumb debug helper in cli"
var_export($1);$0
endsnippet

# Symfony 2 based snippets
snippet sfa "Symfony 2 Controller action"
/**
* @Route("/${1:route_name}", name="$1")
* @Template()
*/
public function $1Action($2)
{
	$3
	return ${4:array();}$0
}
endsnippet

snippet inheritdoc "@inheritdoc docblock"
/**
 * {@inheritdoc}
 */
endsnippet

# ---------------------------------------- 
# init
# ---------------------------------------- 
snippet php "Description" b
<?php

${1:// code...}
endsnippet

# ---------------------------------------- 
# switch
# ---------------------------------------- 
snippet switch "Description" b
switch ($${1:VAR}) {
	case ${2:VALUE}:
		// TODO
		break;
	case ${3:VALUE}:
		// TODO
		break;
	default:
		// TODO
}
endsnippet

# ---------------------------------------- 
# array as list
# ---------------------------------------- 
snippet list "Description" i
array(
	${1:VAR_1}, 
	${2:VAR_2},
);
endsnippet

snippet append "append var to list" i
$${1:VAR}[] = ${2:VALUE};
endsnippet

snippet del "del item from array" i
unset($${1:arr}[${2:INDEX}]);
endsnippet

snippet list_foreach "Description" i
foreach ($$1s as $${1:ITEM}) {
	${4:// code...}
}
endsnippet

# ---------------------------------------- 
# array as dict
# ---------------------------------------- 
snippet dict "Description" i
array(
	${1:key} => ${2:VALUE},
);
endsnippet

snippet dict_foreach "Description" i
foreach ($${1:ARRAY} as $${2:KEY} => $${3:VALUE}) {
	${4:// code...}
}
endsnippet

snippet : "Description" i
=> ${1:VALUE},
endsnippet

snippet kv "Description" i
"${1:KEY}" => $$1,
endsnippet

snippet default "Description" i
isset($${1:ARGS}) ? $$1 : ${2:DEFAULT}
endsnippet


# ---------------------------------------- 
# debug
# ---------------------------------------- 
snippet var_dump "Description" i
echo '<pre>' . var_export($${1:VAR}, true) . '</pre>';
endsnippet

## class
snippet . "Description" i
->
endsnippet

## convert
snippet int "convert string to int" i
intval($${1:STRING})
endsnippet

snippet str "convert int to string" i
strval($${1:INT})
endsnippet

# ---------------------------------------- 
# datetime
# ---------------------------------------- 
# http://php.net/manual/en/datetime.diff.php
snippet timedelta "Description" b
$now = new DateTime('now');
$from = new DateTime('2016-09-27');
$interval = $now->diff($from);
$days = $interval->format('%a');
endsnippet

snippet date "get date from datetime" b
$datetime->format('Y-m-d');
endsnippet

snippet year "Description" i
date("Y")
endsnippet

snippet try "Description" b
try {
	test();
} catch(Exception $e) {
	var_dump($e->getTrace());
}
endsnippet

# :vim:ft=snippets:

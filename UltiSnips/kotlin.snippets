snippet kotlin "kotlin" i
fun main(args: Array<String>) {
    println("Hello, World!")
}
endsnippet

snippet find_view_by_id "kotlin" i
findViewById(R.id.${1:ID})
endsnippet

snippet find "kotlin" i
lateinit var resultTextView: TextView
resultTextView = findViewById(R.id.btn_result)
endsnippet

snippet on_click "kotlin" i
setOnClickListener {
    ${1://TODO}
}
endsnippet

snippet toast "kotlin" i
Toast.makeText(this, "${1:button clicked}",
	Toast.LENGTH_SHORT).show()
endsnippet

snippet func "kotlin" i
public fun ${1:FUNCTION_NAME}(view: View): Int {
    ${2://TODO}
}
endsnippet

snippet random "kotlin" i
Random().nextInt(${1:INT})
endsnippet

snippet set_image "kotlin" i
setImageResource(${1:ID})
endsnippet

snippet when "kotlin" i
when (randomInt) {
   1 -> R.drawable.dice_1
   2 -> R.drawable.dice_2
   else -> R.drawable.dice_6
}
endsnippet

snippet hide_keyboard "kotlin" i
// Hide the keyboard.
val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
imm.hideSoftInputFromWindow(view.windowToken, 0)
endsnippet

snippet show_keyboard "kotlin" i
// Set the focus to the edit text.
editText.requestFocus()

// Show the keyboard.
val imm = getSystemService(Context.INPUT_METHOD_SERVICE) as InputMethodManager
imm.showSoftInput(editText, 0)
endsnippet

snippet if "kotlin" i
if (${1:a && b}) {
    ${2://TODO}
}
endsnippet

snippet log "kotlin" i
Log.d("main", "${1:INFO}")
endsnippet

snippet add_changed_listener "kotlin" i
import android.text.Editable
import android.text.TextWatcher
.addTextChangedListener(object : TextWatcher {

    override fun afterTextChanged(s: Editable) {}

    override fun beforeTextChanged(s: CharSequence, start: Int,
		count: Int, after: Int) {
    }

    override fun onTextChanged(s: CharSequence, start: Int,
		before: Int, count: Int) {
        // s.toString()
    }
})
endsnippet

snippet range "kotlin" i
for (i in 1..${1:N} step 1) {
    ${2:// TODO}
}
endsnippet

snippet list "kotlin" i
mutableListOf(${1:1}, ${2:2})
mutableListOf<${3:CLASS}>()
listOf(1, 2, 3)
endsnippet

snippet for_loop "kotlin" i
for (${1:item} in $1s) {
    ${2:// TODO}
}
endsnippet

snippet set "kotlin" i
setOf(${1:1}, ${2:2})
endsnippet

snippet map "kotlin" i
mutableMapOf("one" to 1, "two" to 2)
endsnippet

snippet data_class "kotlin" i
data class ${1:ClassName}(val name: String, val age: Int)
endsnippet

snippet try "kotlin" i
try {
    ${1:// DO SOMETHINE}
} catch (e: Exception) {
}
endsnippet

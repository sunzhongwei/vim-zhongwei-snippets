snippet gin "go_gin" i
"github.com/gin-gonic/gin"
endsnippet

snippet arg "go_gin" i
c.Param("${1:ARG}")     // /api/:arg
c.DefaultQuery("${2:ARG}", "")      // /api?arg=N
endsnippet

snippet func_gin_api "go_gin" i
func ${1:NAME}(c *gin.Context) {
    uid, _ := c.Get("uid")

	c.JSON(http.StatusOK, gin.H{
		"err_code": 0,
		"err_msg":  "OK",
		"data":     activity,
	})
}
endsnippet

snippet func_gin_api_antd_table "go_gin" i
func ${1:Name}(c *gin.Context) {
	limit, _ := strconv.Atoi(c.Query("pageSize"))
	page, _ := strconv.Atoi(c.Query("current"))
	deviceId := c.DefaultQuery("DeviceId", "")
	var items []models.${2:Model}
	db := models.DB

	if limit > 100 {
		limit = 100
	}
	if page < 1 {
		page = 1
	}
	if deviceId != "" {
		db = db.Where("device_id", deviceId)
	}

	db.Order("id desc").
		Limit(limit).
		Offset((page - 1) * limit).
		Find(&items)

	var count int64 = 0
	db.Model(&models.$2{}).Count(&count)

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"total":   count,
		"data":    items,
	})
}
endsnippet

snippet gin_parse_request "go_gin" i
var $1 models.${1/\w+\s*/\u$0/}
if err := c.ShouldBindJSON(&${1:struct}); err != nil {
    c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
    return
}
endsnippet


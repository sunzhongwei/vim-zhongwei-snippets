snippet gin "go_gin" i
"github.com/gin-gonic/gin"
endsnippet

snippet arg "go_gin" i
c.Param("${1:ARG}")     // /api/:arg
c.DefaultQuery("${2:ARG}", "")      // /api?arg=N
endsnippet

snippet func_gin_api "go_gin" i
func ${1:NAME}(c *gin.Context) {
    uid, _ := c.Get("uid")

	c.JSON(http.StatusOK, gin.H{
		"err_code": 0,
		"err_msg":  "OK",
		"data":     activity,
	})
}
endsnippet

snippet func_gin_api_antd_table "go_gin" i
func ${1:Name}(c *gin.Context) {
	limit, _ := strconv.Atoi(c.Query("pageSize"))
	page, _ := strconv.Atoi(c.Query("current"))
	deviceId := c.DefaultQuery("DeviceId", "")
	var items []models.${2:Model}
	db := models.DB

	if limit > 100 {
		limit = 100
	}
	if page < 1 {
		page = 1
	}
	if deviceId != "" {
		db = db.Where("device_id", deviceId)
	}

	db.Order("id desc").
		Limit(limit).
		Offset((page - 1) * limit).
		Find(&items)

	var count int64 = 0
	db.Model(&models.$2{}).Count(&count)

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"total":   count,
		"data":    items,
	})
}
endsnippet

snippet gin_parse_request "go_gin" i
var $1 models.${1/\w+\s*/\u$0/}
if err := c.ShouldBindJSON(&${1:struct}); err != nil {
    c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
    return
}
endsnippet

snippet gin_crud_for_antdpro "go_gin" i
// TODO: move routes to main.go 
// $1
admin.GET("/get$1", controllers.Get$1s)
admin.POST("/add$1", controllers.Add$1)
admin.POST("/update$1", controllers.Update$1)
admin.POST("/remove$1", controllers.Remove$1)


// TODO: move model
import "gorm.io/gorm"

type $1 struct {
	gorm.Model
	Name string 
}

func ($1) TableName() string {
	return "${1/\w+\s*/\l$0/}"
}


import (
	"fmt"
	"net/http"
	"strconv"

	"github.com/gin-gonic/gin"
)


func Add${1:Item}(c *gin.Context) {
	var item models.$1
	if err := c.ShouldBindJSON(&item); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}
	if result := models.DB.Create(&item); result.Error != nil {
		// Error 1062: Duplicate entry
	}
	c.JSON(http.StatusOK, gin.H{
		"success": true,
	})
}

func Update$1(c *gin.Context) {
	var item models.$1
	if err := c.ShouldBindJSON(&item); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	models.DB.
		Select("status", "updated_at").
		Updates(item)
	//models.DB.Model(&item).Updates(item)

	c.JSON(http.StatusOK, gin.H{
		"success": true,
	})
}

func Get$1s(c *gin.Context) {
	limit, _ := strconv.Atoi(c.Query("pageSize"))
	page, _ := strconv.Atoi(c.Query("current"))
	status, _ := strconv.Atoi(c.DefaultQuery("status", "0"))
	name := c.DefaultQuery("name", "")
	var items []models.$1
	db := models.DB

	if limit > 100 {
		limit = 100
	}
	if page < 1 {
		page = 1
	}
	if status > 0 {
		db = db.Where("status", status)
	}
	if name != "" {
		db = db.Where("name", name)
	}

	if keyword, isExist := c.GetQuery("title"); isExist {
		db = db.Where("title LIKE ?", fmt.Sprintf("%%%s%%", keyword))
	}

	db.Order("id desc").
		Limit(limit).
		Offset((page - 1) * limit).
		Find(&items)

	var count int64 = 0
	models.DB.Model(&models.$1{}).Count(&count)

	c.JSON(http.StatusOK, gin.H{
		"success": true,
		"data":    items,
		"total":   count,
	})
}

type Remove$1Request struct {
	Ids []int `json:"ids"`
}

func Remove$1(c *gin.Context) {
	var remove$1Request Remove$1Request
	if err := c.ShouldBindJSON(&remove$1Request); err != nil {
		c.JSON(http.StatusBadRequest, gin.H{"error": err.Error()})
		return
	}

	models.DB.Delete(&models.$1{}, remove$1Request.Ids)

	c.JSON(http.StatusOK, gin.H{
		"err_code": 0,
		"err_msg":  "OK",
	})
}
endsnippet
